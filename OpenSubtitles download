library(httr)
library(rvest)
library(dplyr)
library(readr)

#Function to detect encoding
detect_encoding <- function(input_file) {
  encoding_info <- readr::guess_encoding(input_file, n_max = 100)
  detected_encoding <- encoding_info$encoding[1]
  return(detected_encoding)
}

#Function to search on OpenSubtitles and retrieve results
get_open_subtitles_results <- function(query) {
  url <- paste0("https://www.opensubtitles.org/fr/search2/moviename-", gsub(" ", "+", query), "/sublanguageid-all")
  page <- read_html(url)
  
  movie_names <- page %>% 
    html_nodes("a[class='bnone']") %>% 
    html_text() %>% 
    gsub("\n|\t", "", .)
  
  movie_links <- page %>% 
    html_nodes("a[class='bnone']") %>% 
    html_attr("href") %>% 
    paste0("https://www.opensubtitles.org", .)
  
  results <- data.frame(
    movie_name = movie_names,
    link = movie_links,
    stringsAsFactors = FALSE
  )
  
  return(results)
}

#Function to extract available subtitles for the user search query
get_subtitles <- function(movie_url) {
  page <- read_html(movie_url)
  
  subtitles <- page %>% 
    html_nodes("td[id^='main'] a[class='bnone']") %>% 
    html_attr("href")
  
  return(subtitles)
}

#Function to download and extract subtitles
download_subtitle <- function(download_url, dest_dir = "subtitles") {
  if (!dir.exists(dest_dir)) dir.create(dest_dir)
  
  #Create a temporary folder for this specific operation
  temp_dir <- tempfile(pattern = "subtitles_temp")
  dir.create(temp_dir)
  
  temp_file <- tempfile(fileext = ".zip")
  
  #Download zip file
  GET(download_url, write_disk(temp_file, overwrite = TRUE))
  
  #Extract file to temporary folder
  unzip(temp_file, exdir = temp_dir)
  
  #List only files in the temporary folder
  files <- list.files(temp_dir, recursive = TRUE, full.names = TRUE)
  
  #Filter .srt files and exclude unnecessary files
  nfo_files <- files[grepl("\\.nfo$", files, ignore.case = TRUE)]
  if (length(nfo_files) > 0) {
    file.remove(nfo_files)
  }
  
  srt_files <- files[grepl("\\.srt$", files, ignore.case = TRUE)]
  
  if (length(srt_files) > 0) {
    #Move .srt files to the subtitles folder
    moved_files <- file.copy(srt_files, dest_dir, overwrite = TRUE)
    
    #Clean temporary folder
    unlink(temp_dir, recursive = TRUE)
    unlink(temp_file)
    
    message("Subtitles downloaded and extracted in: ", dest_dir)
    
    #Return new .srt files only
    return(file.path(dest_dir, basename(srt_files[moved_files])))
  } else {
    #Clean even if you fail
    unlink(temp_dir, recursive = TRUE)
    unlink(temp_file)
    
    message("No .srt files found in the downloaded archive.")
    return(NULL)
  }
}

#Function to convert the downloaded subtitle to UTF-8 only if necessary
convert_subtitle_to_utf8_if_needed <- function(input_file, output_file) {
  detected_encoding <- detect_encoding(input_file)
  
  if (detected_encoding == "UTF-8") {
    message("The file is already in UTF-8 encoding. No conversion needed.")
    return(input_file)  #Return original file if no conversion needed
  }
  
  content <- tryCatch(
    readLines(input_file, encoding = detected_encoding),
    error = function(e) {
      stop("Error reading file: ", e$message)
    }
  )
  
  content_utf8 <- tryCatch(
    iconv(content, from = detected_encoding, to = "UTF-8", sub = "byte"),
    error = function(e) {
      stop("Error converting to UTF-8: ", e$message)
    }
  )
  
  tryCatch(
    {
      writeLines(content_utf8, output_file, useBytes = TRUE)
      message("Successful conversion. File saved as: ", output_file)
      
      if (file.exists(input_file)) {
        file.remove(input_file)
        message("Old file deleted: ", input_file)
      }
      
      return(output_file)  #Return the new converted file
    },
    error = function(e) {
      stop("Error writing file: ", e$message)
    }
  )
}

#Primary function to interact with the user
main <- function() {
  cat("Enter the name of a movie or series: ")
  query <- readline()
  
  results <- get_open_subtitles_results(query)
  
  if (nrow(results) == 0) {
    cat("No results found.\n")
    return(NULL)
  }
  
  cat("\nSearch results:\n")
  for (i in 1:nrow(results)) {
    cat(i, ": ", results$movie_name[i], ", URL: ", results$link[i], "\n", sep = "")
  }
  
  cat("\nChoose a number to display the corresponding subtitles: ")
  choice <- as.numeric(readline())
  
  if (!is.na(choice) && choice > 0 && choice <= nrow(results)) {
    selected_url <- results$link[choice]
    subtitles <- get_subtitles(selected_url)
    
    if (length(subtitles) > 0) {
      cat("\nAvailable subtitles:\n")
      for (i in seq_along(subtitles)) {
        subtitle_parts <- gsub("^/fr/subtitles/(\\d+)/(.*)-(\\w{2})$", "\\1 \\2 \\3", subtitles[i])
        subtitle_info <- strsplit(subtitle_parts, " ")[[1]]
        id <- subtitle_info[1]
        title <- subtitle_info[2]
        language <- subtitle_info[3]
        complete_url <- paste0("https://www.opensubtitles.org/fr/subtitleserve/sub/", id)
        cat(i, ": ", title, " Langue: ", language, " URL: ", complete_url, "\n", sep = "")
      }
      
      cat("\nSelect a number to download the corresponding subtitle: ")
      sub_choice <- as.numeric(readline())
      
      if (!is.na(sub_choice) && sub_choice > 0 && sub_choice <= length(subtitles)) {
        subtitle_parts <- gsub("^/fr/subtitles/(\\d+)/(.*)-(\\w{2})$", "\\1", subtitles[sub_choice])
        download_url <- paste0("https://www.opensubtitles.org/fr/subtitleserve/sub/", subtitle_parts)
        srt_files <- download_subtitle(download_url)
        
        if (!is.null(srt_files)) {
          last_file <- tail(srt_files, n = 1)  #Only work on the last downloaded file
          output_file <- sub("\\.srt$", "_utf8.srt", last_file)
          
          final_file <- convert_subtitle_to_utf8_if_needed(last_file, output_file)
          
          # Store the final file path in the variable
          inputfile <- final_file
          cat("Subtitle file path stored in inputfile: ", inputfile, "\n")
        }
        
        cat("Download and conversion complete. Program completed.\n")
        return()
      } else {
        cat("Invalid choice. Program completed.\n")
        return()
      }
    } else {
      cat("No subtitles found for this film.\n")
    }
  } else {
    cat("Invalid choice. Program completed.\n")
  }
}

# Run the program
invisible(main())
