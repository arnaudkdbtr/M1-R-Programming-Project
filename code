#Automatic Translation of Subtitles Using Different Translators API (DeepL, Google Translate, OpenAI)

######Packages needed################ 
#install.packages("httr")           # 
#install.packages("stringr")        #
#####################################

rm(list = ls()) #Cleaning the working environment
t = Sys.time()

library(httr)
library(stringr)
library(shiny)

api_key_deepl = "07485d6e-3c77-4fa1-bfee-cc2f82f9b44a:fx" #You have to create an account to get a new API Key
api_key_openai = "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" # OpenAI API Key

# Function for translation using DeepL
deepl_translation = function(inputfile, language, api_key_deepl) {
  answer = POST(
    url = "https://api-free.deepl.com/v2/translate",
    body = list(
      auth_key = api_key_deepl,
      text = inputfile,
      target_lang = toupper(language)  #DeepL uses uppercase language code (ex : en => EN)
    ),
    encode = "form"
  )
  response_data = content(answer, "parsed", encoding = "UTF-8")
  
  #Check if the translation is available or not
  if (!is.null(response_data$translations) && length(response_data$translations) > 0) { #If the translation is not null and the length of the answer > 0 then return the response
    return(response_data$translations[[1]]$text)
  } else {                                                                              #If anything else happen => error
    message("(DeepL) Translation error or no translation available.")
    return(NULL)
  }
}

# Function for translation using Google Translate
google_translation = function(inputfile, language) {
  url = paste0(
    "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=",
    language,
    "&dt=t&q=",
    URLencode(inputfile)
  )
  
  response = GET(url)
  response_data = content(response, "parsed", encoding = "UTF-8")
  
  if (!is.null(response_data) && length(response_data) > 0) {
    translated_text = sapply(response_data[[1]], function(x) x[[1]])
    return(paste(translated_text, collapse = " "))
  } else {
    message("(Google Translate) Translation error or no translation available.")
    return(NULL)
  }
}

# Function for translation using OpenAI (ChatGPT)
openai_translation = function(inputfile, language, api_key_openai) {
  url = "https://api.openai.com/v1/chat/completions"
  headers = c(
    `Authorization` = paste("Bearer", api_key_openai),
    `Content-Type` = "application/json"
  )
  
  body = paste0(
    '{"model": "gpt-3.5-turbo", "messages": [',
    '{"role": "system", "content": "You are a translator. Translate the following text into ', language, '"},',
    '{"role": "user", "content": "', gsub('"', '\\"', inputfile), '"}',
    ']}'
  )
  
  response = POST(url, add_headers(.headers = headers), body = body)
  response_data = content(response, "parsed", encoding = "UTF-8")
  
  if (!is.null(response_data$choices) && length(response_data$choices) > 0) {
    return(response_data$choices[[1]]$message$content)
  } else {
    message("(ChatGPT) Translation error or no translation available.")
    return(NULL)
  }
}

# Function to process and translate a block of text
process_translation_block <- function(text_block, timing, language, service, api_key_deepl) {
  original_text = paste(text_block, collapse = "\n") 
  
  if (service == "deepl") {
    translated_text = deepl_translation(original_text, language, api_key_deepl)
  } else if (service == "google") {
    translated_text = google_translation(original_text, language)
  } else if (service == "chatgpt") {
    translated_text = openai_translation(original_text, language, api_key_openai)
  } else {
    stop("Invalid translation service specified. Use 'deepl', 'google', or 'chatgpt'.")
  }
  
  # Preserve the separate lines in the translated block
  translated_lines = str_split(translated_text, "\n")[[1]]
  
  return(c(timing, paste(translated_text, "\n")))
}

translations <- function(inputfile, language, service) {
  lines = readLines(inputfile, encoding = "UTF-8")
  translated_lines = list()
  text_block = c()
  timing = NULL
  
  # Check file format (SRT or VTT)
  is_vtt = grepl("WEBVTT", lines[1])
  if (is_vtt) {
    lines = lines[-1] # Remove the "WEBVTT" line
  }
  
  for(line in lines){
    if (grepl("-->",line)){
      if(length(text_block)>0){
        original_text = paste(text_block, collapse ="")
        translated_text = deepl_translation(original_text, language, api_key_deepl)
        translated_lines = c(translated_lines, timing, paste(translated_text, "\n"))
        text_block = c() #To reset text_block and avoid translating multiple times the same thing
      }
      timing = line #Stock the timing line
    }
    else if (str_trim(line) %in% as.character(1:99999)){ #If the line corresponds to a subtitle number, then the number is stored to preserve the file structure.
      translated_lines = c(translated_lines,line)
    }
    
    else if (grepl("^NOTE", line)) {  # Détection de la ligne de note
      # Ajouter la ligne de note sans traduction
      translated_lines = c(translated_lines, line)
    }
    
    else if (grepl("^Slide [0-9]+", line)) {  # Détection des titres de chapitres comme "Slide 1"
      # Ajouter le titre du chapitre sans traduction
      translated_lines = c(translated_lines, line)
    } 
    
    else if(str_trim(line) != ""){ #If the line is not empty
      line_without_tag = gsub("</?[a-z]+>", "", str_trim(line)) # Remove HTML-like tags and the unnecessary spaces
      text_block = c(text_block, line_without_tag)
    }
    else{ #If the line is empty
      if(length(text_block)>0){ #If the text_block is not empty
        translated_lines = c(translated_lines, process_translation_block(text_block, timing, language, service, api_key_deepl))
        text_block = c() #Resetting text_block for the next text_block translation
      }
      translated_lines = c(translated_lines, line) #Adding the timing or number of the line to the translated_lines list
    }
  }
  
  if (length(text_block)>0){ #If there is a last block that is not followed by timing (at the end of the file)
    translated_lines = c(translated_lines, process_translation_block(text_block, timing, language, service, api_key_deepl))
  }
  
  translated_lines = unlist(translated_lines) #We transform the list into a single vector
}

#Install the package if required
if (!require("shiny")) install.packages("shiny")

#Full list of target languages (ISO 639-1)
languages_all <- list(
  "Afrikaans" = "af", "Albanian" = "sq", "Arabic" = "ar", "Armenian" = "hy", "Azerbaijani" = "az",
  "Basque" = "eu", "Belarusian" = "be", "Bengali" = "bn", "Bosnian" = "bs", "Bulgarian" = "bg",
  "Catalan" = "ca", "Chinese (Simplified)" = "zh-CN", "Chinese (Traditional)" = "zh-TW", "Croatian" = "hr", 
  "Czech" = "cs", "Danish" = "da", "Dutch" = "nl", "English" = "en", "Esperanto" = "eo", 
  "Estonian" = "et", "Finnish" = "fi", "French" = "fr", "Galician" = "gl", "Georgian" = "ka",
  "German" = "de", "Greek" = "el", "Gujarati" = "gu", "Haitian Creole" = "ht", "Hebrew" = "he",
  "Hindi" = "hi", "Hungarian" = "hu", "Icelandic" = "is", "Indonesian" = "id", "Irish" = "ga",
  "Italian" = "it", "Japanese" = "ja", "Javanese" = "jv", "Kannada" = "kn", "Kazakh" = "kk",
  "Khmer" = "km", "Korean" = "ko", "Kurdish" = "ku", "Lao" = "lo", "Latvian" = "lv",
  "Lithuanian" = "lt", "Luxembourgish" = "lb", "Macedonian" = "mk", "Malay" = "ms", 
  "Malayalam" = "ml", "Maltese" = "mt", "Maori" = "mi", "Marathi" = "mr", "Mongolian" = "mn",
  "Nepali" = "ne", "Norwegian" = "no", "Pashto" = "ps", "Persian" = "fa", "Polish" = "pl",
  "Portuguese" = "pt", "Punjabi" = "pa", "Romanian" = "ro", "Russian" = "ru", "Samoan" = "sm",
  "Serbian" = "sr", "Slovak" = "sk", "Slovenian" = "sl", "Somali" = "so", "Spanish" = "es",
  "Swahili" = "sw", "Swedish" = "sv", "Tagalog" = "tl", "Tamil" = "ta", "Telugu" = "te",
  "Thai" = "th", "Turkish" = "tr", "Ukrainian" = "uk", "Urdu" = "ur", "Uzbek" = "uz",
  "Vietnamese" = "vi", "Welsh" = "cy", "Xhosa" = "xh", "Yiddish" = "yi", "Zulu" = "zu"
)

#List of languages supported by DeepL
languages_deepl <- list(
  "German" = "de", "English" = "en", "French" = "fr", "Italian" = "it", 
  "Spanish" = "es", "Dutch" = "nl", "Polish" = "pl", "Portuguese" = "pt",
  "Russian" = "ru", "Japanese" = "ja", "Chinese (Simplified)" = "zh", 
  "Bulgarian" = "bg", "Czech" = "cs", "Danish" = "da", "Estonian" = "et", 
  "Finnish" = "fi", "Greek" = "el", "Hungarian" = "hu", "Lithuanian" = "lt",
  "Latvian" = "lv", "Romanian" = "ro", "Slovak" = "sk", "Slovenian" = "sl", 
  "Swedish" = "sv", "Turkish" = "tr", "Ukrainian" = "uk", "Norwegian (Bokmål)" = "nb", 
  "Korean" = "ko", "Indonesian" = "id", "Arabic" = "ar"
)

languages_google_translate <- list(
  "French" = "fr", "Spanish" = "es", "German" = "de", "Italian" = "it",
  "Portuguese" = "pt", "Dutch" = "nl", "Russian" = "ru", 
  "Chinese (Simplified)" = "zh", "Japanese" = "ja", "Korean" = "ko", 
  "Arabic" = "ar", "Hindi" = "hi", "Turkish" = "tr", "Swedish" = "sv",
  "Polish" = "pl", "Ukrainian" = "uk", "Greek" = "el", "Danish" = "da",
  "Finnish" = "fi", "Czech" = "cs", "Norwegian" = "no", "Romanian" = "ro",
  "Serbian" = "sr", "Croatian" = "hr", "Catalan" = "ca", "Basque" = "eu",
  "Bengali" = "bn", "Guarani" = "gn", "Kurdish" = "ku", "Swahili" = "sw",
  "Cebuano" = "ceb", "Tagalog" = "tl", "Vietnamese" = "vi", "Tamil" = "ta",
  "Telugu" = "te", "Marathi" = "mr", "Hebrew" = "he", "Malayalam" = "ml",
  "Gujarati" = "gu", "Kannada" = "kn", "Punjabi" = "pa", "Mongolian" = "mn",
  "Nepali" = "ne", "Afrikaans" = "af", "Icelandic" = "is", "Lithuanian" = "lt",
  "Latvian" = "lv", "Estonian" = "et", "Slovak" = "sk", "Slovenian" = "sl",
  "Hmong" = "hmn", "Sundanese" = "su", "Xhosa" = "xh", "Yiddish" = "yi",
  "Zulu" = "zu", "Lao" = "lo", "Bulgarian" = "bg"
)

#User UI
ui <- fluidPage(
  titlePanel("Automatic Subtitle Translation"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Upload the subtitle file (.srt or .vtt)", 
                accept = c(".srt", ".vtt")),
      radioButtons("service", "Translation services:", 
                   choices = list("DeepL" = "deepl", 
                                  "Google Translate" = "google", 
                                  "ChatGPT" = "chatgpt")),
      uiOutput("language_selector"), # Dynamic language selector
      actionButton("translate", "Translate"),
      downloadButton("download", "Download the translated file")
    ),
    
    mainPanel(
      h3("Preview of the translated file"),
      verbatimTextOutput("preview")
    )
  )
)

server <- function(input, output, session) {
  translated_text <- reactiveVal()  #Variable to stock translated subtitles
  
  #Update language choices based on selected service
  observe({
    if (input$service == "deepl") {
      updateSelectInput(session, "language", choices = languages_deepl)
    } else {
      updateSelectInput(session, "language", choices = languages_google_translate)
    }
  })
  
  output$language_selector <- renderUI({
    selectInput("language", "Target language:", choices = if (input$service == "deepl") languages_deepl else languages_all)
  })
  
  observeEvent(input$translate, {
    req(input$file)  #Check if the file is uploaded
    
    #Load the file
    file_content <- readLines(input$file$datapath, encoding = "UTF-8")
    
    #Call each service depending on the user choice
    if (input$service == "google") {
      translated <- google_translation(paste(file_content, collapse = "\n"), input$language)
    } else if (input$service == "deepl") {
      translated <- deepl_translation(paste(file_content, collapse = "\n"), input$language, api_key_deepl)
    } else if (input$service == "chatgpt") {
      translated <- openai_translation(paste(file_content, collapse = "\n"), input$language, api_key_openai)
    }
    
    translated_text(translated)  #Stock the translation
  })
  
  #Show the preview of the translated file
  output$preview <- renderText({
    req(translated_text())
    translated_text()
  })
  
  #Download the translated file
  output$download <- downloadHandler(
    filename = function() {
      paste0("translated_", input$language, ".srt")
    },
    content = function(file) {
      writeLines(translated_text(), file)
    }
  )
}

#Launch the interface
shinyApp(ui, server)

Sys.time() - t
