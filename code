#Automatic Translation of Subtitles Using Different Translators API (DeepL, Google Translate, OpenAI)

######Packages needed################ 
#install.packages("httr")           # 
#install.packages("stringr")        #
#####################################

rm(list = ls()) #Cleaning the working environment

library(httr)
library(stringr)
library(jsonlite)
library(shiny)

t = Sys.time()

#List of languages supported by DeepL
languages_deepl = list(
  "Arabic" = "ar", "Bulgarian" = "bg", "Chinese (Simplified)" = "zh", 
  "Czech" = "cs", "Danish" = "da", "Dutch" = "nl", "English" = "en", 
  "Estonian" = "et", "Finnish" = "fi", "French" = "fr", "German" = "de", 
  "Greek" = "el", "Hungarian" = "hu", "Italian" = "it", "Japanese" = "ja", 
  "Korean" = "ko", "Latvian" = "lv", "Lithuanian" = "lt", "Polish" = "pl", 
  "Portuguese" = "pt", "Romanian" = "ro", "Russian" = "ru", "Slovak" = "sk", 
  "Slovenian" = "sl", "Spanish" = "es", "Swedish" = "sv", "Turkish" = "tr", 
  "Ukrainian" = "uk"
)

#List of languages supported by Google Translate
languages_google_translate = list(
  "Afrikaans" = "af", "Arabic" = "ar", "Basque" = "eu", "Bengali" = "bn", 
  "Catalan" = "ca", "Chinese (Simplified)" = "zh", "Czech" = "cs", 
  "Croatian" = "hr", "Danish" = "da", "Dutch" = "nl", "Finnish" = "fi", 
  "French" = "fr", "German" = "de", "Greek" = "el", "Guarani" = "gn", 
  "Hebrew" = "he", "Hindi" = "hi", "Hmong" = "hmn", "Icelandic" = "is", 
  "Italian" = "it", "Japanese" = "ja", "Kannada" = "kn", "Korean" = "ko", 
  "Kurdish" = "ku", "Latvian" = "lv", "Lithuanian" = "lt", "Malayalam" = "ml", 
  "Marathi" = "mr", "Mongolian" = "mn", "Nepali" = "ne", "Norwegian" = "no", 
  "Polish" = "pl", "Portuguese" = "pt", "Punjabi" = "pa", "Romanian" = "ro", 
  "Russian" = "ru", "Serbian" = "sr", "Slovak" = "sk", "Slovenian" = "sl", 
  "Spanish" = "es", "Swahili" = "sw", "Swedish" = "sv", "Tamil" = "ta", 
  "Telugu" = "te", "Thai" = "th", "Turkish" = "tr", "Ukrainian" = "uk", 
  "Vietnamese" = "vi", "Xhosa" = "xh", "Yiddish" = "yi", "Zulu" = "zu"
)

api_key_deepl = "07485d6e-3c77-4fa1-bfee-cc2f82f9b44a:fx" #You have to create an account to get a new API Key
api_key_openai = "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" # OpenAI API Key

#Function for translation using DeepL
deepl_translation <- function(inputfile, language, api_key_deepl) {
  answer = POST(
    url = "https://api-free.deepl.com/v2/translate",
    body = list(
      auth_key = api_key_deepl,
      text = inputfile,
      target_lang = toupper(language)  #DeepL uses uppercase language code (ex : en => EN)
    ),
    encode = "form"
  )
  response_data = content(answer, "parsed", encoding = "UTF-8")
  
  #Check if the translation is available or not
  if (!is.null(response_data$translations) && length(response_data$translations) > 0) { #If the translation is not null and the length of the answer > 0 then return the response
    return(response_data$translations[[1]]$text)
  } else {                                                                              #If anything else happen => error
    message("(DeepL) Translation error or no translation available.")
    return(NULL)
  }
}

#Function for translation using Google Translate
google_translation <- function(inputfile, language) {
  url = paste0(
    "https://translate.googleapis.com/translate_a/single?client=gtx&sl=auto&tl=",
    language,
    "&dt=t&q=",
    URLencode(inputfile)
  )
  
  response = GET(url)
  response_data = content(response, "parsed", encoding = "UTF-8")
  
  if (!is.null(response_data) && length(response_data) > 0) {
    translated_text = sapply(response_data[[1]], function(x) x[[1]])
    return(paste(translated_text, collapse = " "))
  } else {
    message("(Google Translate) Translation error or no translation available.")
    return(NULL)
  }
}

#Function to process and translate a block of text
process_translation_block <- function(text_block, timing, language, service, api_key_deepl) {
  original_text = paste(text_block, collapse = "") # Merge all lines
  
  if (service == "deepl") {
    translated_text = deepl_translation(original_text, language, api_key_deepl)
  } else if (service == "google") {
    translated_text = google_translation(original_text, language)
  } else if (service == "chatgpt") {
    translated_text = openai_translation(original_text, language, api_key_openai)
  } else {
    stop("Invalid translation service specified. Use 'deepl', 'google', or 'chatgpt'.")
  }
  
  return(c(timing, paste(translated_text, "\n")))
}

translations <- function(inputfile, language, service) {
  lines = readLines(inputfile, encoding = "UTF-8")
  translated_lines = list()
  text_block = c()
  timing = NULL
  
  #Check file format (SRT or VTT)
  is_vtt = grepl("WEBVTT", lines[1])
  if (is_vtt) {
    lines = lines[-1] #Remove the "WEBVTT" line
  }
  
  for(line in lines){
    if (grepl("-->",line)){
      if(length(text_block)>0){
        original_text = paste(text_block, collapse ="")
        translated_text = deepl_translation(original_text, language, api_key_deepl)
        translated_lines = c(translated_lines, timing, paste(translated_text, "\n"))
        text_block = c() #To reset text_block and avoid translating multiple times the same thing
      }
      timing = line #Stock the timing line
    }
    else if (str_trim(line) %in% as.character(1:99999)){ #If the line corresponds to a subtitle number, then the number is stored to preserve the file structure.
      translated_lines = c(translated_lines,line)
    }
    
    else if (grepl("^NOTE", line)) {  #Note line detection
      #Add note line without translating
      translated_lines = c(translated_lines, line)
    }
    
    else if (grepl("^Slide [0-9]+", line)) {  #Detection of chapter titles such as “Slide 1”.
      #Add chapter title without translating
      translated_lines = c(translated_lines, line)
    } 
    
    else if(str_trim(line) != ""){ #If the line is not empty
      line_without_tag = gsub("</?[a-z]+>", "", str_trim(line)) #Remove HTML-like tags and the unnecessary spaces
      text_block = c(text_block, line_without_tag)
    }
    else{ #If the line is empty
      if(length(text_block)>0){ #If the text_block is not empty
        translated_lines = c(translated_lines, process_translation_block(text_block, timing, language, service, api_key_deepl))
        text_block = c() #Resetting text_block for the next text_block translation
      }
      translated_lines = c(translated_lines, line) #Adding the timing or number of the line to the translated_lines list
    }
  }
  
  if (length(text_block)>0){ #If there is a last block that is not followed by timing (at the end of the file)
    translated_lines = c(translated_lines, process_translation_block(text_block, timing, language, service, api_key_deepl))
  }
  
  translated_lines = unlist(translated_lines) #We transform the list into a single vector
  output_ext = if (is_vtt) ".vtt" else ".srt"
  outputfile = gsub("\\.(srt|vtt)$", paste0("_translated_", language, output_ext), inputfile)
  writeLines(translated_lines, outputfile, useBytes = TRUE)
  
  list(output = outputfile, preview = translated_lines)
}

#Shiny UI 
ui = fluidPage(
  titlePanel("Subtitle Translator"),
  sidebarLayout(
    sidebarPanel(
      fileInput("fileInput", "Upload Subtitle File (SRT or VTT)", accept = c(".srt", ".vtt")),
      radioButtons("service", "Translation Service", 
                   choices = list("DeepL" = "deepl", "Google Translate" = "google"), 
                   selected = "deepl"),  # Default service
      uiOutput("languageUI"), # Dynamic language selector
      actionButton("translate", "Translate"),
      downloadButton("download", "Download Translated Subtitles")
    ),
    mainPanel(
      h3("Preview of Translated Subtitles"),
      verbatimTextOutput("preview")
    )
  )
)

server <- function(input, output, session) {
  
  #Update language options based on the selected service
  output$languageUI = renderUI({
    req(input$service)  # Ensure that the service has been selected
    if (input$service == "deepl") {
      selectInput("language", "Target Language", choices = languages_deepl)
    } else {
      selectInput("language", "Target Language", choices = languages_google_translate)
    }
  })
  
  translation_result = reactiveVal(NULL)
  
  observeEvent(input$translate, {
    req(input$fileInput, input$language, input$service)
    translation = translations(input$fileInput$datapath, input$language, input$service)
    translation_result(translation)
  })
  
  output$preview = renderText({
    req(translation_result())
    paste(translation_result()$preview, collapse = "\n")
  })
  
  output$download = downloadHandler(
    filename = function() {
      basename(translation_result()$output)
    },
    content = function(file) {
      file.copy(translation_result()$output, file)
    }
  )
}

shinyApp(ui = ui, server = server)

Sys.time() - t
